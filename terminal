#!/usr/bin/env node

var term = require('terminal-kit').terminal;

function terminate() {
  term.grabInput(false);
  setTimeout(function () { process.exit() }, 100);
}

const label = "Type anything on the keyboard...\n";

term.moveTo((term.width - label.length) / 2, 1);
term.bold.cyan(label);
term.green('Hit CTRL-C to quit.\n\n');

term.grabInput({ mouse: 'button' });

term.on('key', function (name, matches, data) {
  console.log("'key' event:", name);
  if (name === 'CTRL_C') { terminate(); }
});

term.on('terminal', function (name, data) {
  console.log("'terminal' event:", name, data);
});

term.on('mouse', function (name, data) {
  console.log("'mouse' event:", name, data);
});



// const { exec } = require('child_process');

/*

var items = ['File', 'Edit', 'View', 'History', 'Bookmarks', 'Tools', 'Help'];

var options = {
  y: term.height / 2,	// the menu will be on the top of the terminal
  style: term.inverse,
  selectedStyle: term.dim.blue.bgGreen
};

// term.clear();

function drawArea() {

  term.moveTo(1, 1);
  term.red("┏");

  term.moveTo(term.width, 1);
  term.red("┓");

  term.moveTo(1, term.height);
  term.red("┗");

  term.moveTo(term.width, term.height);
  term.red("┛");

  for (let x = 2; x < (term.width); x++) {
    term.moveTo(x, 1);
    term.red("━");
    term.moveTo(x, term.height);
    term.red("━");
  }

  for (let y = 2; y < (term.height); y++) {
    term.moveTo(1, y);
    term.red("┃");
    term.moveTo(term.width, y);
    term.red("┃");
  }
}


term.fullscreen(true);

drawArea();

// term.singleLineMenu(items, options, function (error, response) {
//   term('\n').eraseLineAfter.green(
//     "#%s selected: %s (%s,%s)\n",
//     response.selectedIndex,
//     response.selectedText,
//     response.x,
//     response.y
//   );
//   process.exit();
// });

while (true) {

}

/*
// The term() function simply output a string to stdout, using current style
// output "Hello world!" in default terminal's colors
term( 'Hello world!\n' ) ;

// This output 'red' in red
term.red( 'red' ) ;

// This output 'bold' in bold
term.bold( 'bold' ) ;

// output 'mixed' using bold, underlined & red, exposing the style-mixing syntax
term.bold.underline.red( 'mixed' ) ;

// printf() style formatting everywhere:
// this will output 'My name is Jack, I'm 32.' in green
term.green( "My name is %s, I'm %d.\n" , 'Jack' , 32 ) ;

// Since v0.16.x, style markup are supported as a shorthand.
// Those two lines produce the same result.
term( "My name is " ).red( "Jack" )( " and I'm " ).green( "32\n" ) ;
term( "My name is ^rJack^ and I'm ^g32\n" ) ;

// Width and height of the terminal
term( 'The terminal size is %dx%d' , term.width , term.height ) ;

// Move the cursor at the upper-left corner
term.moveTo( 1 , 1 ) ;

// We can always pass additional arguments that will be displayed...
term.moveTo( 1 , 1 , 'Upper-left corner' ) ;

// ... and formated
term.moveTo( 1 , 1 , "My name is %s, I'm %d.\n" , 'Jack' , 32 ) ;

// ... or even combined with other styles
term.moveTo.cyan( 1 , 1 , "My name is %s, I'm %d.\n" , 'Jack' , 32  ) ;

// Get some user input
term.magenta( "Enter your name: " ) ;
term.inputField(
  function( error , input ) {
    term.green( "\nYour name is '%s'\n" , input ) ;
  }
) ;
*/
